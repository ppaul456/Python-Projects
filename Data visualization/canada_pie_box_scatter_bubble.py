import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library
#Install module is xlrd,which pandas requires to read in excel files.

df_can = pd.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
                       sheet_name='Canada by Citizenship',
                       skiprows=range(20),
                       skipfooter=2)

print ('Data read into a pandas dataframe!')

print (df_can.head())
# view top 5,tip: You can specify the number of rows you'd like to see
print (df_can.tail())
# view last 5

#clean the data set to remove a few unnecessary columns
# in pandas axis=0 represents rows (default) and axis=1 represents columns.
df_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)
print(df_can.head(2))

#rename the columns so that they make sense
df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)
print(df_can.columns)

# let's examine the types of the column labels, change it to string(all column labels of type string)
all(isinstance(column, str) for column in df_can.columns)
df_can.columns = list(map(str, df_can.columns))
print(df_can.columns.values)

#setting the 'Country' column as the index using set_index() method
df_can.set_index('Country', inplace=True)

#add a 'Total' column that sums up the total immigrants by country over the entire period
df_can['Total'] = df_can.sum(axis=1) #axis = 0 means along the column and axis = 1 means working along the row.
print ('data dimensions:', df_can.shape)  # 38 cloumns now

# finally, let's create a list of years from 1980 - 2013
years = list(map(str, range(1980, 2014)))
print(years)

########################################################################
## Visualization Data
import matplotlib as mpl
import matplotlib.pyplot as plt
print ('Matplotlib version: ', mpl.__version__) #Matplotlib version

## Pie Chart
# Use pandas groupby method to summarize the immigration data by Continent. 
# The general process of groupby involves the following steps:
# 1. Split: Splitting the data into groups based on some criteria. 
# 2. Apply: Applying a function to each group independently: .sum(), .count(), .mean(), .std()......etc.
# 3. Combine: Combining the results into a data structure

# group countries by continents and apply sum() function 
df_continents = df_can.groupby('Continent', axis=0).sum() #以continents(洲)區隔

# note: the output of the groupby method is a `groupby' object. 
# we can not use it further until we apply a function (eg .sum())
print(type(df_can.groupby('Continent', axis=0)))
print(df_continents.head())

## Plot the data, pass in kind = 'pie'
# autopct - is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge(楔形). If it is a format string, the label will be fmt%pct.
# startangle - rotates the start of the pie chart by angle degrees counterclockwise from the x-axis.
# shadow - Draws a shadow beneath the pie (to give a 3D feel).
# autopct create %, start angle represent starting point

colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge(楔形).

df_continents['Total'].plot(kind='pie',
                            figsize=(15, 6),
                            autopct='%1.1f%%', 
                            startangle=90,    
                            shadow=True,         # Draws a shadow
                            labels=None,         # turn off labels on pie chart
                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                            colors=colors_list,  # add custom colors
                            explode=explode_list # 'explode' lowest 3: semphasize the lowest three continents
                            )

# scale the title up by 12% to match pctdistance
plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) 

plt.axis('equal') 
# add legend
plt.legend(labels=df_continents.index, loc='upper left')  #add it as a seperate legend
plt.show()

#################################################################################
## Box Plots
# Minimun: Smallest number in the dataset.
# First quartile: Middle number between the minimum and the median.
# Second quartile (Median): Middle number of the (sorted) dataset.
# Third quartile: Middle number between median and maximum.
# Maximum: Highest number in the dataset.

# to get a dataframe, place extra square brackets around 'Japan'.
df_japan = df_can.loc[['Japan'], years].transpose()
print(df_japan.head())

# plot the data, passing in kind='box'
df_japan.plot(kind='box', figsize=(8, 6))

plt.title('Box plot of Japanese Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')
plt.show()

# We can view the actual numbers by calling the describe() method on the dataframe.
print(df_japan.describe())

###############################################################################
## Scatter Plots
# A scatter plot (2D) is a useful method of comparing variables against each other

# we can use the sum() method to get the total population per year
df_tot = pd.DataFrame(df_can[years].sum(axis=0)) #axis = 0 means along the column

# change the years to type int (useful for regression later on)
df_tot.index = map(int, df_tot.index)

# reset the index to put in back in as a column in the df_tot dataframe
df_tot.reset_index(inplace = True)

# rename columns
df_tot.columns = ['year', 'total']

# view the final dataframe
print(df_tot.head())

##Plot the data, passing in kind='scatter'
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')

plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')
plt.show()
# We can mathematically analyze this upward trend using a regression line (line of best fit).

# Get the equation(方程式) of line of best fit. We will use Numpy's polyfit() method by passing in the following:
# x: x-coordinates of the data.
# y: y-coordinates of the data.
# deg: Degree of fitting polynomial. 1 = linear(線性), 2 = quadratic, and so on.
x = df_tot['year']      # year on x-axis
y = df_tot['total']     # total on y-axis
fit = np.polyfit(x, y, deg=1)
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')

plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')

# plot line of best fit
plt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years
plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))
plt.show()
# print out the line of best fit
'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) 

###################################################################################
## Bubble Plots
# A bubble plot is a variation of the scatter plot that displays three dimensions of data (x, y, z).
df_can_t = df_can[years].transpose() # transposed dataframe

# cast the Years (the index) to type int
df_can_t.index = map(int, df_can_t.index)

# let's label the index. This will automatically be the column name when we reset the index
df_can_t.index.name = 'Year'

# reset index to bring the Year in as a column
df_can_t.reset_index(inplace=True)
# view the changes
df_can_t.head()

##Create the normalized weights.
# normalize Brazil data
norm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) / (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())

# normalize Argentina data
norm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) / (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())

# Plot the data

# Brazil
ax0 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Brazil',
                    figsize=(14, 8),
                    alpha=0.5,                  # transparency
                    color='green',
                    s=norm_brazil * 2000 + 10,  # pass in weights 
                    xlim=(1975, 2015)
                   )

# Argentina
ax1 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Argentina',
                    alpha=0.5,
                    color="blue",
                    s=norm_argentina * 2000 + 10,
                    ax = ax0
                   )

ax0.set_ylabel('Number of Immigrants')
ax0.set_title('Immigration from Brazil and Argentina from 1980 - 2013')
ax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')
# The size of the bubble corresponds to the magnitude of immigrating population for that year, compared to the 1980 - 2013 data. 
# The larger the bubble, the more immigrants in that year.
ax0.show()